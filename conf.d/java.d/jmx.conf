// netdata-plugin-java-daemon JMX plugin configuration
//
// The comments in this file should help you to extend this configuration.
// Comments starting with '//' are descriptive comments. Uncommenting them leads to syntax errors.
// Block comments ('/* {...} */') are used to exclude configuration examples.
// These can be uncommented.
//
// For a more formal reference user the configuration scheme: org.firehol.netdata.plugin.jmx.configuration.JmxPluginConfiguration

{
    // If true auto detect and monitor running local virtual machines on plugin start.
    "autoDetectLocalVirtualMachines": "true",

    // Configure a list of JMX servers to monitor.
    "jmxServers": [
        // Example configuration for a java program started on the same host with these flags:
        // -Dcom.sun.management.jmxremote.port=9999 -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false
        /*
        {
            // Name displayed at the dashboard menu.
            "name": "ExampleJMX",
            // JMX Service URL used to connect to the JVM.
            // service:jmx:rmi://[host[:port]][urlPath]
            // @see: https://docs.oracle.com/cd/E19159-01/819-7758/gcnqf/index.html
            "serviceUrl": "service:jmx:rmi:///jndi/rmi://:9999/jmxrmi"
        }
        */
    ],
    // Global chart configurations.
    // Every monitored JMX Servers tries to monitor each chart configuration.
    // If a JMX Server does not have the required M(X)Beans we won't try adding it over and over again.
    //
    // The netdata-plugin-java-daemon maintains a set of common charts.
    // Feel free to open pull requests to share new chart configurations of M(X)Beans distributed with java
    // or any open source project.
    "commonCharts": [

        // ####################################################################
        // Chart configuration documentation
        // ####################################################################
        /*
        {
            // Unique ID of this chart in this list.
            "id": "example",
            // Title describing this chart
            "title": "Example chart configuration",
            // Unit of the collected value
            "units": "some_unit",
            // orders charts. Lower numbers make the charts appear before the ones with higher numbers
            "priority": "8000",
            // Possible chart types: AREA, LINE, STACKED
            "chartType": "AREA",
            // Possible dimension algorithms: 
            // ABSOLUTE, INCREMENTAL, PERCENTAGE_OF_ABSOLUTE_ROW, PERCENTAGE_OF_INCREMENTAL_ROW
            "dimensionAlgorithm": "ABSOLUTE",
            // List of dimensions to add to the chart.
            "dimensions": [
                {
                    // Object Name of the M(X)Bean to collect a value from.
                    // @see: http://www.oracle.com/technetwork/java/javase/tech/best-practices-jsp-136021.html#mozTocId509360
                    "from": "java.lang:type=OperatingSystem",
                    // M(X)Bean attribute to collect.
                    // The getter of the attribute must return one of these types.
                    // - Integer (int)
                    // - Double (double)
                    // - Long (long)
                    "value": "ProcessCpuTime",
                    // Name at the dashboard
                    "name": "cpu",
                    // Tells netdata to multiply the value before displaying it.
                    "multiplier": "1",
                    // Tells netdata to divide the value before displaying it.
                    "divisor": "1",
                    // Collect the value and handle it in dimensionAlgorithm but do not display it.
                    "hidden": "false"
                }
            ]
        },
        */

        // ####################################################################
        // JVM M(X)Beans
        // ####################################################################
        {
            "id": "cpu",
            "title": "JVM CPU utilization",
            "units": "percentage",
            "priority": "8000",
            "chartType": "AREA",
            "dimensionAlgorithm": "INCREMENTAL",
            "dimensions": [
                {
                    "from": "java.lang:type=OperatingSystem",
                    "value": "ProcessCpuTime",
                    "name": "cpu",
                    "divisor": "10000000"
                }
            ]
        },
        {
            "id": "load",
            "title": "JVM Load Average",
            "units": "load",
            "priority": "8010",
            "chartType": "LINE",
            "dimensionAlgorithm": "ABSOLUTE",
            "dimensions": [
                {
                    "from": "java.lang:type=OperatingSystem",
                    "value": "ProcessCpuLoad",
                    "name": "load1"
                }
            ]
        },
        {
            "id": "uptime",
            "title": "JVM Uptime",
            "units": "seconds",
            "priority": "8020",
            "chartType": "LINE",
            "dimensionAlgorithm": "ABSOLUTE",
            "dimensions": [
                {
                    "from": "java.lang:type=Runtime",
                    "value": "Uptime",
                    "name": "uptime",
                    "divisor": "1000"
                }
            ]
        },
        {
            "id": "threading",
            "title": "Threads",
            "units": "threads",
            "priority": "8030",
            "chartType": "LINE",
            "dimensionAlgorithm": "ABSOLUTE",
            "dimensions": [
                // Returns the peak live thread count since the Java virtual machine started or peak was reset.
                {
                    "from": "java.lang:type=Threading",
                    "value": "PeakThreadCount",
                    "name": "peak"
                },
                // Returns the current number of live daemon threads.
                {
                    "from": "java.lang:type=Threading",
                    "value": "DaemonThreadCount",
                    "name": "daemon"
                },
                // Returns the total number of threads created and also started since the Java virtual machine started.
                {
                    "from": "java.lang:type=Threading",
                    "value": "TotalStartedThreadCount",
                    "name": "total"
                },
                // Returns the current number of live threads including both daemon and non-daemon threads.
                {
                    "from": "java.lang:type=Threading",
                    "value": "ThreadCount",
                    "name": "current"
                }
            ]
        },
        {
            "id": "classloading",
            "title": "Classes loaded",
            "family": "class_loading",
            "units": "classes",
            "priority": "8040",
            "chartType": "LINE",
            "dimensionAlgorithm": "ABSOLUTE",
            "dimensions": [
                {
                    "from": "java.lang:type=ClassLoading",
                    "value": "TotalLoadedClassCount",
                    "name": "loaded_since_start"
                },
                {
                    "from": "java.lang:type=ClassLoading",
                    "value": "LoadedClassCount",
                    "name": "current"
                },
                {
                    "from": "java.lang:type=ClassLoading",
                    "value": "UnloadedClassCount",
                    "name": "unloaded_since_start"
                }
            ]
        },
        {
            "id": "compilation",
            "title": "Compilation Time",
            "units": "percentage",
            "priority": "8050",
            "chartType": "LINE",
            "dimensionAlgorithm": "INCREMENTAL",
            "dimensions": [
                {
                    "from": "java.lang:type=Compilation",
                    // Returns the approximate accumlated elapsed time (in milliseconds) spent in compilation.
                    "value": "TotalCompilationTime",
                    "name": "total",
                    // Convert ms/s to percent
                    "divisor": "10"
                }
            ]
        },
        {
            "id": "garbagecount",
            "title": "Garbage Collection Number",
            "family": "garbage_collection",
            "units": "collection/s",
            "priority": "8060",
            "chartType": "LINE",
            "dimensionAlgorithm": "INCREMENTAL",
            "dimensions": [
                {
                    "from": "java.lang:type=GarbageCollector,name=PS Scavenge",
                    "value": "CollectionCount",
                    "name": "PS_Scavenge"
                },
                {
                    "from": "java.lang:type=GarbageCollector,name=PS MarkSweep",
                    "value": "CollectionCount",
                    "name": "PS_MarkSweep"
                }
            ]
        },
        {
            "id": "garbagetime",
            "title": "Time spent collecting garbage",
            "family": "garbage_collection",
            "units": "percentage",
            "priority": "8070",
            "chartType": "LINE",
            "dimensionAlgorithm": "INCREMENTAL",
            "dimensions": [
                {
                    "from": "java.lang:type=GarbageCollector,name=PS Scavenge",
                    "value": "CollectionTime",
                    "name": "PS_Scavenge",
                    "divisor": "10"
                },
                {
                    "from": "java.lang:type=GarbageCollector,name=PS MarkSweep",
                    "value": "CollectionTime",
                    "name": "PS_MarkSweep",
                    "divisor": "10"                    
                }
            ]
        }
    ]
}
